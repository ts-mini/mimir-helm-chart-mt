{{- if .Values.nginx.enabled }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "mimir.fullname" . }}-nginx
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "mimir.name" . }}-nginx
    chart: {{ template "mimir.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  nginx.conf: |-
    worker_processes  5;  ## Default: 1
    error_log  /dev/stderr;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;

    events {
      worker_connections  4096;  ## Default: 1024
    }

    http {
      default_type application/octet-stream;
      client_max_body_size 100m;
      log_format main escape=json
        '{'
          '"time_local":"$time_local",'
          '"remote_addr":"$remote_addr",'
          '"remote_user":"$remote_user",'
          '"request":"$request",'
          '"status": "$status",'
          '"body_bytes_sent":"$body_bytes_sent",'
          '"request_time":"$request_time",'
          '"http_referrer":"$http_referer",'
          '"http_user_agent":"$http_user_agent"'
        '}';
      access_log   /dev/stderr  main;
      sendfile     on;
      tcp_nopush   on;
      resolver {{ default "kube-dns.kube-system.svc.cluster.local" .Values.nginx.config.dnsResolver }};

      map $http_x_scope_orgid $scopeid {
            default   $http_x_scope_orgid;
            ""        "{{ .Values.ingress.defaultScope }}";
      }

      server { # simple reverse-proxy
        listen {{ .Values.nginx.http_listen_port }};
        proxy_set_header X-Scope-OrgID $scopeid;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_http_version 1.1;

        location = /healthz {
          return 200 'alive';
        }

        location /ingester {
          proxy_pass      http://{{ template "mimir.fullname" . }}-ingester-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }

        # Distributor endpoints
        location /distributor {
          proxy_pass      http://{{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }

        location = /api/v1/push {
          proxy_pass      http://{{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }

        # Alertmanager endpoints
        location {{ template "mimir.alertmanagerHttpPrefix" . }} {
          proxy_pass      http://{{ template "mimir.fullname" . }}-alertmanager.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }
        location = /multitenant_alertmanager/status {
          proxy_pass      http://{{ template "mimir.fullname" . }}-alertmanager.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }
        location = /api/v1/alerts {
          proxy_pass      http://{{ template "mimir.fullname" . }}-alertmanager.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }

        # Ruler endpoints
        location {{ template "mimir.prometheusHttpPrefix" . }}/config/v1/rules {
          proxy_pass      http://{{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }
        location {{ template "mimir.prometheusHttpPrefix" . }}/api/v1/rules {
          proxy_pass      http://{{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }
        location {{ template "mimir.prometheusHttpPrefix" . }}/api/v1/alerts {
          proxy_pass      http://{{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }
        location = /ruler/ring {
          proxy_pass      http://{{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }

        # Rest of {{ template "mimir.prometheusHttpPrefix" . }} goes to the query frontend
        location {{ template "mimir.prometheusHttpPrefix" . }} {
          proxy_pass      http://{{ template "mimir.fullname" . }}-query-frontend.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }
        # Buildinfo endpoint can go to any component
        location = /api/v1/status/buildinfo {
          proxy_pass      http://{{ template "mimir.fullname" . }}-query-frontend.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }
        # Compactor endpoint for uploading blocks
        location /api/v1/upload/block/ {
          proxy_pass      http://{{ template "mimir.fullname" . }}-compactor.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.mimir.serverHttpListenPort }}$request_uri;
        }

{{- $root := . }}
{{- range .Values.ingress.alertmanager.scopeIDs }}
{{ $rootScope := . }}
        location = {{ template "mimir.alertmanagerHttpPrefix" $root }}/{{ $rootScope.scopeName }} {
          proxy_set_header X-Scope-OrgID {{ $rootScope.scopeID }};
          proxy_pass      http://{{ template "mimir.fullname" $root }}-alertmanager.{{ $root.Release.Namespace }}.svc.cluster.local:{{ $root.Values.mimir.serverHttpListenPort }}{{ template "mimir.alertmanagerHttpPrefix" $root }}/;
        }

        location ~ {{ template "mimir.alertmanagerHttpPrefix" $root }}/{{ $rootScope.scopeName }}/(.*) {
          proxy_set_header X-Scope-OrgID {{ $rootScope.scopeID }};
          proxy_pass      http://{{ template "mimir.fullname" $root }}-alertmanager.{{ $root.Release.Namespace }}.svc.cluster.local:{{ $root.Values.mimir.serverHttpListenPort }}{{ template "mimir.alertmanagerHttpPrefix" $root }}/$1;
        }

{{- end }}

      }
    }
{{- end }}

# Mimir MT Chart

mimir:
  releaseName: mimir
  serverHttpListenPort: 8080
  alertmanagerHttpPrefix: /alertmanager

global:
  clusterDomain: cluster.local

ingress:
  annotations: {}
  ingressClassName: nginx
  enabled: false
  hosts:
    - host: 'chart.local'
      paths:
        - /
  tls:
    - hosts:
        - chart.local
      secretName: tls-example

  # for adding alertmanager endpoints
  alertmanager:
    enabled: false
    scopeIDs:
      - scopeName: defaultScope
        scopeID: 'defaultScopeID'

  distributor:
    enabled: false
    # scopeIDs:
    #   - scopeName: infra
    #     scopeID: "0"
    #     annotations: {}
    #       # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    #       # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    #       # kubernetes.io/ingress.class: nginx
    #       # nginx.ingress.kubernetes.io/auth-type: basic
    #       # nginx.ingress.kubernetes.io/auth-secret: mimir-basic-auth-prom-push
    #       # nginx.ingress.kubernetes.io/auth-secret-type: auth-map
    #     # host: chart.local
    #     # paths:
    #     #   - /api/prom/push
    #     # tls:
    #     #   secretName: example-tls
    #     #   host: chart.local

nginx:
  enabled: true
  replicas: 2
  http_listen_port: 80
  config:
    dnsResolver: kube-dns.kube-system.svc.cluster.local
  image:
    repository: nginx
    tag: 1.21
    pullPolicy: IfNotPresent
    #pullSecrets:
  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 16Mi

  ## Additional Mimir container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: ''
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity: {}
  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /healthz
      port: http-metrics
    initialDelaySeconds: 10
  readinessProbe:
    httpGet:
      path: /healthz
      port: http-metrics
    initialDelaySeconds: 10

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%

  terminationGracePeriodSeconds: 10

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
